{"version":3,"sources":["theme.ts","components/FakeSevenSegmentDisplay.tsx","components/SmileyButton.tsx","store/actions.ts","utils.ts","minesweeper.ts","store/reducer.ts","store/selectors.ts","store/index.ts","containers/Header.tsx","components/GridCell.tsx","components/Grid.tsx","containers/Grid.tsx","App.tsx","index.tsx"],"names":["COLORS","cell","bright","medium","dark","background","color","FakeSevenSegmentDisplay","props","css","value","toString","padStart","SmileyButton","useState","isHovering","setIsHovering","onClick","onMouseEnter","onMouseLeave","smile","dead","sunglasses","state","initialize","createStandardAction","sweep","flag","reset","createAction","incrementTimer","get2DArrayOf","width","height","Array","from","map","MINE","generateMap","numberOfMines","strIndiciesOfMines","length","randomX","Math","floor","random","randomY","potentialCoordinates","includes","push","strIndicies","split","x","y","Number","getMineIndicies","forEach","board","newBoard","cloneDeep","getSurroundingPoints","filter","calculateNumbers","point","boardWidth","boardHeight","timeElapsed","undefined","visibility","flags","explodedMines","inProgress","action","type","getType","actions","payload","newVisibility","coords","timestamp","sweepIndicies","shift","surroundingPoints","newFlags","every","row","isVisible","getGridState","Error","cellVisibility","getGameState","getTimeElapsed","getRemainingFlags","flagCount","getIsGridDisabled","gameState","getBoardDimensions","configureStore","createStore","rootReducer","composeWithDevTools","connect","selectors","remainingFlags","resetGame","notStarted","victory","defeat","GridCell","Cell","cellProps","isHidden","CellWrapper","sweepCell","onContextMenu","event","preventDefault","toggleFlagForCell","topAndLeftBorderColor","bottomAndRightBorderColor","style","getStyles","children","HoverTint","styled","div","span","n","fontSize","Grid","React","memo","actualHeightPx","size","cellPx","actualWidthPx","X","Y","_","key","cellState","clickHandlers","disabled","onCellFlag","onCellSweep","Date","now","prevProps","nextProps","isEqual","App","store","dispatch","setInterval","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9b89cde6.chunk.js","sourcesContent":["export const COLORS = {\r\n  appBackground: 'papayawhip',\r\n  cellBackgroundHidden: '#e2e2e2',\r\n  cellBackgroundExposed: '#d5d5d5',\r\n  hoverTint: 'rgba(0,0,0,0.1)',\r\n  oneBlue: '#0000ff',\r\n  twoGreen: '#008100',\r\n  threeOrange: '#ff1300',\r\n  fourViolet: '#000083',\r\n  fiveRed: '#810500',\r\n  sixTeal: '#2a9494',\r\n  sevenYellow: '#FFFF99',\r\n  eightMagenta: '#FF00FF',\r\n  flagRed: '#ff0000',\r\n  explodedMineBackground: '#ff0000',\r\n  borders: {\r\n    cell: { bright: 'white', medium: '#bbbbbb', dark: 'gray' },\r\n  },\r\n  sevenSegment: {\r\n    background: 'black',\r\n    color: 'red',\r\n  },\r\n}\r\n","import React from 'react'\r\nimport { css } from 'styled-components/macro'\r\nimport { COLORS } from '../theme'\r\n\r\nconst FakeSevenSegmentDisplay = (props: { value: number }) => (\r\n  <div\r\n    css={css`\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      background: ${COLORS.sevenSegment.background};\r\n      color: ${COLORS.sevenSegment.color};\r\n      width: 84px;\r\n      height: 36px;\r\n      font-size: 48px;\r\n      letter-spacing: -3px;\r\n      font-family: 'Courier New', Courier, monospace;\r\n      font-weight: 700;\r\n      line-height: 40px;\r\n      padding-top: 6px;\r\n      border-right: 1px solid ${COLORS.borders.cell.bright};\r\n      border-bottom: 1px solid ${COLORS.borders.cell.bright};\r\n      border-top: 1px solid ${COLORS.borders.cell.dark};\r\n      border-left: 1px solid ${COLORS.borders.cell.dark};\r\n    `}\r\n  >\r\n    {props.value.toString().padStart(3, '0')}\r\n  </div>\r\n)\r\n\r\nexport default FakeSevenSegmentDisplay\r\n","import React, { useState } from 'react'\r\nimport { css } from 'styled-components/macro'\r\nimport { COLORS } from '../theme'\r\n\r\nexport type SmileStates = 'smile' | 'dead' | 'sunglasses'\r\nconst SmileyButton = (props: { state: SmileStates; onClick?(): void }) => {\r\n  const [isHovering, setIsHovering] = useState(false)\r\n  return (\r\n    <div\r\n      onClick={props.onClick}\r\n      onMouseEnter={() => setIsHovering(true)}\r\n      onMouseLeave={() => setIsHovering(false)}\r\n      css={css`\r\n        background: red;\r\n        width: 40px;\r\n        height: 40px;\r\n        font-size: 24px;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        background: ${COLORS.cellBackgroundExposed};\r\n        border-top: 2px solid ${COLORS.borders.cell.bright};\r\n        border-left: 2px solid ${COLORS.borders.cell.bright};\r\n        border-bottom: 2px solid ${COLORS.borders.cell.dark};\r\n        border-right: 2px solid ${COLORS.borders.cell.dark};\r\n\r\n        &:hover {\r\n          cursor: pointer;\r\n        }\r\n      `}\r\n    >\r\n      {isHovering\r\n        ? '😳'\r\n        : { smile: '😊', dead: '😖', sunglasses: '😎' }[props.state]}\r\n    </div>\r\n  )\r\n}\r\nexport default SmileyButton\r\n","import { createStandardAction, createAction } from 'typesafe-actions'\r\nimport { Coordinates } from '../minesweeper'\r\n\r\nexport const initialize = createStandardAction('INITIALIZE')<{\r\n  width: number\r\n  height: number\r\n  numberOfMines: number\r\n}>()\r\n\r\nexport const sweep = createStandardAction('SWEEP')<\r\n  Coordinates & { timestamp: number }\r\n>()\r\nexport const flag = createStandardAction('FLAG')<Coordinates>()\r\n\r\nexport const reset = createAction('RESET')\r\n\r\nexport const incrementTimer = createAction('INCREMENT_TIMER')\r\n","export function get2DArrayOf<T>(\r\n  value: T,\r\n  width: number,\r\n  height: number,\r\n): T[][] {\r\n  return Array.from(Array(height)).map(() =>\r\n    Array.from(Array(width)).map(() => value),\r\n  )\r\n}\r\n","import { CellState } from './store/reducer'\r\nimport { get2DArrayOf } from './utils'\r\nimport { cloneDeep } from 'lodash'\r\n\r\nconst MINE = 'mine'\r\nexport type Coordinates = { x: number; y: number }\r\n\r\nexport function generateMap(\r\n  width: number,\r\n  height: number,\r\n  numberOfMines: number,\r\n): CellState[][] {\r\n  let map: CellState[][] = get2DArrayOf('0', width, height)\r\n\r\n  // set mines\r\n  getMineIndicies(width, height, numberOfMines).forEach(\r\n    ([x, y]) => (map[y][x] = MINE),\r\n  )\r\n\r\n  map = calculateNumbers(map, width, height)\r\n\r\n  return map\r\n}\r\n\r\nfunction getMineIndicies(\r\n  width: number,\r\n  height: number,\r\n  numberOfMines: number,\r\n): number[][] {\r\n  const strIndiciesOfMines: string[] = []\r\n  while (strIndiciesOfMines.length < numberOfMines) {\r\n    const randomX = Math.floor(Math.random() * width)\r\n    const randomY = Math.floor(Math.random() * height)\r\n    const potentialCoordinates = `${randomX}/${randomY}`\r\n    if (!strIndiciesOfMines.includes(potentialCoordinates)) {\r\n      strIndiciesOfMines.push(potentialCoordinates)\r\n    }\r\n  }\r\n  return strIndiciesOfMines.map(strIndicies => {\r\n    const [x, y] = strIndicies.split('/')\r\n    return [Number(x), Number(y)]\r\n  })\r\n}\r\n\r\nfunction calculateNumbers(\r\n  board: CellState[][],\r\n  width: number,\r\n  height: number,\r\n): CellState[][] {\r\n  const newBoard = cloneDeep(board)\r\n  for (let y = 0; y < height; y++) {\r\n    for (let x = 0; x < width; x++) {\r\n      if (board[y][x] === '0') {\r\n        newBoard[y][x] = getSurroundingPoints({ x, y }, width, height)\r\n          .filter(({ x, y }) => board[y][x] === MINE)\r\n          .length.toString() as CellState\r\n      }\r\n    }\r\n  }\r\n  return newBoard\r\n}\r\nexport function getSurroundingPoints(\r\n  point: Coordinates,\r\n  width: number,\r\n  height: number,\r\n): Coordinates[] {\r\n  const { x, y } = point\r\n  return [\r\n    [x - 1, y - 1],\r\n    [x, y - 1],\r\n    [x + 1, y - 1],\r\n    [x - 1, y],\r\n    [x + 1, y],\r\n    [x - 1, y + 1],\r\n    [x, y + 1],\r\n    [x + 1, y + 1],\r\n  ]\r\n    .filter(([x, y]) => x >= 0 && x < width && y >= 0 && y < height)\r\n    .map(([x, y]) => ({ x, y }))\r\n}\r\n","import * as actions from './actions'\r\nimport { ActionType, getType } from 'typesafe-actions'\r\nimport { get2DArrayOf } from '../utils'\r\nimport { cloneDeep, every } from 'lodash'\r\nimport { generateMap, getSurroundingPoints } from '../minesweeper'\r\nimport { number } from '@storybook/addon-knobs'\r\n\r\ntype AllActions = ActionType<typeof actions>\r\n\r\nexport type CellState =\r\n  | '0'\r\n  | '1'\r\n  | '2'\r\n  | '3'\r\n  | '4'\r\n  | '5'\r\n  | '6'\r\n  | '7'\r\n  | '8'\r\n  | 'mine'\r\n\r\nexport interface IState {\r\n  boardWidth: number\r\n  boardHeight: number\r\n  numberOfMines: number\r\n  timeElapsed: number\r\n  board: CellState[][] | undefined\r\n  visibility: boolean[][] | undefined\r\n  flags: boolean[][] | undefined\r\n  explodedMines: boolean\r\n  inProgress: boolean\r\n}\r\n\r\nexport default (\r\n  state: IState = {\r\n    boardWidth: 10,\r\n    boardHeight: 10,\r\n    numberOfMines: 10,\r\n    timeElapsed: 0,\r\n    board: undefined,\r\n    visibility: undefined,\r\n    flags: undefined,\r\n    explodedMines: false,\r\n    inProgress: false,\r\n  },\r\n  action: AllActions,\r\n): IState => {\r\n  switch (action.type) {\r\n    case getType(actions.initialize):\r\n      return {\r\n        board: generateMap(\r\n          action.payload.width,\r\n          action.payload.height,\r\n          action.payload.numberOfMines,\r\n        ),\r\n        boardWidth: action.payload.width,\r\n        boardHeight: action.payload.height,\r\n        visibility: get2DArrayOf(\r\n          false,\r\n          action.payload.width,\r\n          action.payload.height,\r\n        ),\r\n        flags: get2DArrayOf(false, action.payload.width, action.payload.height),\r\n        explodedMines: false,\r\n        timeElapsed: 0,\r\n        numberOfMines: action.payload.numberOfMines,\r\n        inProgress: false,\r\n      }\r\n\r\n    case getType(actions.sweep):\r\n      const newVisibility = cloneDeep(state.visibility!)\r\n      const height = newVisibility.length\r\n      const width = newVisibility[0].length\r\n      const { timestamp, ...coords } = action.payload\r\n      let sweepIndicies = [coords]\r\n      let explodedMines = state.explodedMines\r\n      while (sweepIndicies.length > 0) {\r\n        const { x, y } = sweepIndicies.shift()!\r\n\r\n        const value = state.board![y][x]\r\n        if (value === 'mine') {\r\n          explodedMines = true\r\n        } else if (value === '0' && !newVisibility[y][x]) {\r\n          const surroundingPoints = getSurroundingPoints(\r\n            { x, y },\r\n            width,\r\n            height,\r\n          )\r\n          sweepIndicies = [...sweepIndicies, ...surroundingPoints]\r\n        }\r\n        newVisibility[y][x] = true\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        visibility: newVisibility,\r\n        explodedMines,\r\n        inProgress: true,\r\n      }\r\n\r\n    case getType(actions.flag):\r\n      const newFlags = cloneDeep(state.flags!)\r\n      const { x, y } = action.payload\r\n      newFlags[y][x] = !newFlags[y][x]\r\n      return {\r\n        ...state,\r\n        flags: newFlags,\r\n        inProgress: true,\r\n      }\r\n\r\n    case getType(actions.reset):\r\n      return {\r\n        ...state,\r\n        board: generateMap(\r\n          state.boardWidth,\r\n          state.boardHeight,\r\n          state.numberOfMines,\r\n        ),\r\n\r\n        visibility: get2DArrayOf(false, state.boardWidth, state.boardHeight),\r\n        flags: get2DArrayOf(false, state.boardWidth, state.boardHeight),\r\n        explodedMines: false,\r\n        timeElapsed: 0,\r\n        inProgress: false,\r\n      }\r\n\r\n    case getType(actions.incrementTimer):\r\n      if (\r\n        state.inProgress &&\r\n        !state.explodedMines &&\r\n        state.visibility &&\r\n        !every(\r\n          state.visibility.map((row, y) =>\r\n            every(\r\n              row.map(\r\n                (isVisible, x) =>\r\n                  (isVisible && state.board![y][x] !== 'mine') ||\r\n                  (!isVisible && state.board![y][x] === 'mine'),\r\n              ),\r\n            ),\r\n          ),\r\n        )\r\n      ) {\r\n        return { ...state, timeElapsed: state.timeElapsed + 1 }\r\n      } else {\r\n        return state\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { IState } from './reducer'\r\nimport { GridCellStates } from '../components/GridCell'\r\nimport { every } from 'lodash'\r\n\r\nexport const getGridState = (state: IState): GridCellStates[][] => {\r\n  if (!state.visibility || !state.board || !state.flags) {\r\n    throw new Error('This should not be called before initialization')\r\n  }\r\n  let gridState = state.visibility.map((row, y) =>\r\n    row.map((cellVisibility, x) => {\r\n      if (\r\n        cellVisibility ||\r\n        (state.explodedMines && state.board![y][x] === 'mine')\r\n      ) {\r\n        if (cellVisibility && state.board![y][x] === 'mine') {\r\n          return 'explodedMine'\r\n        } else {\r\n          return state.board![y][x]\r\n        }\r\n      } else if (state.flags![y][x]) {\r\n        return 'flagged'\r\n      } else {\r\n        return 'hidden'\r\n      }\r\n    }),\r\n  )\r\n  return gridState\r\n}\r\n\r\nexport type GameState = 'notStarted' | 'inProgress' | 'victory' | 'defeat'\r\nexport const getGameState = (state: IState): GameState => {\r\n  if (\r\n    !state.visibility ||\r\n    !state.board ||\r\n    !state.flags ||\r\n    every(state.visibility.map(row => every(row.map(value => !value))))\r\n  ) {\r\n    return 'notStarted'\r\n  }\r\n\r\n  if (state.explodedMines) {\r\n    return 'defeat'\r\n  }\r\n\r\n  const isVictory = every(\r\n    state.visibility.map((row, y) =>\r\n      every(\r\n        row.map(\r\n          (isVisible, x) =>\r\n            (isVisible && state.board![y][x] !== 'mine') ||\r\n            (!isVisible && state.board![y][x] === 'mine'),\r\n        ),\r\n      ),\r\n    ),\r\n  )\r\n\r\n  if (isVictory) {\r\n    return 'victory'\r\n  } else {\r\n    return 'inProgress'\r\n  }\r\n}\r\n\r\nexport const getTimeElapsed = (state: IState): number => {\r\n  return state.timeElapsed\r\n}\r\n\r\nexport const getRemainingFlags = (state: IState): number => {\r\n  if (state.numberOfMines === undefined) {\r\n    return 0\r\n  }\r\n\r\n  let flagCount = 0\r\n  if (state.flags) {\r\n    state.flags.forEach((row, y) =>\r\n      row.forEach((value, x) => {\r\n        if (value && !state.visibility![y][x]) {\r\n          flagCount++\r\n        }\r\n      }),\r\n    )\r\n  }\r\n\r\n  return state.numberOfMines - flagCount\r\n}\r\n\r\nexport const getIsGridDisabled = (state: IState): boolean => {\r\n  const gameState = getGameState(state)\r\n  return !['inProgress', 'notStarted'].includes(gameState)\r\n}\r\n\r\nexport const getBoardDimensions = (\r\n  state: IState,\r\n): { width: number; height: number } => ({\r\n  width: state.boardWidth,\r\n  height: state.boardHeight,\r\n})\r\n","import { createStore } from 'redux'\r\nimport rootReducer from './reducer'\r\n\r\nimport * as actions from './actions'\r\nimport * as selectors from './selectors'\r\n\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\n\r\nexport const configureStore = () => {\r\n  const store = createStore(rootReducer, {}, composeWithDevTools())\r\n  return store\r\n}\r\n\r\nexport default configureStore()\r\nexport { actions }\r\nexport { selectors }\r\n","import React from 'react'\r\nimport { css } from 'styled-components/macro'\r\nimport { connect } from 'react-redux'\r\nimport FakeSevenSegmentDisplay from '../components/FakeSevenSegmentDisplay'\r\nimport SmileyButton, { SmileStates } from '../components/SmileyButton'\r\nimport { GameState } from '../store/selectors'\r\nimport { selectors, actions } from '../store'\r\nimport { IState } from '../store/reducer'\r\nimport { COLORS } from '../theme'\r\n\r\nconst Header = (props: {\r\n  timeElapsed: number\r\n  gameState: GameState\r\n  remainingFlags: number\r\n  resetGame(): void\r\n}) => (\r\n  <div\r\n    css={css`\r\n      width: 100%;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n      margin-bottom: 8px;\r\n      background: ${COLORS.cellBackgroundExposed};\r\n      padding: 4px;\r\n      border: 1px solid gray;\r\n    `}\r\n  >\r\n    <FakeSevenSegmentDisplay\r\n      value={props.timeElapsed}\r\n    ></FakeSevenSegmentDisplay>\r\n    <SmileyButton\r\n      onClick={props.resetGame}\r\n      state={\r\n        {\r\n          notStarted: 'smile',\r\n          inProgress: 'smile',\r\n          victory: 'sunglasses',\r\n          defeat: 'dead',\r\n        }[props.gameState] as SmileStates\r\n      }\r\n    ></SmileyButton>\r\n    <FakeSevenSegmentDisplay\r\n      value={props.remainingFlags}\r\n    ></FakeSevenSegmentDisplay>\r\n  </div>\r\n)\r\n\r\nexport default connect(\r\n  (state: IState) => ({\r\n    timeElapsed: selectors.getTimeElapsed(state),\r\n    gameState: selectors.getGameState(state),\r\n    remainingFlags: selectors.getRemainingFlags(state),\r\n  }),\r\n  { resetGame: actions.reset },\r\n)(Header)\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { COLORS } from '../theme'\r\n\r\nexport type GridCellStates =\r\n  | 'hidden'\r\n  | 'flagged'\r\n  | 'mine'\r\n  | 'explodedMine'\r\n  | '0'\r\n  | '1'\r\n  | '2'\r\n  | '3'\r\n  | '4'\r\n  | '5'\r\n  | '6'\r\n  | '7'\r\n  | '8'\r\n\r\nexport type Props = {\r\n  state: GridCellStates\r\n  sweepCell?(): void\r\n  toggleFlagForCell?(): void\r\n}\r\n\r\nconst GridCell = (props: Props) => {\r\n  const Cell = (cellProps: { children?: React.ReactNode }) => {\r\n    const isHidden = ['hidden', 'flagged'].includes(props.state)\r\n    return (\r\n      <CellWrapper\r\n        onClick={props.sweepCell}\r\n        onContextMenu={event => {\r\n          event.preventDefault()\r\n          if (isHidden && props.toggleFlagForCell) {\r\n            props.toggleFlagForCell()\r\n          }\r\n        }}\r\n        background={\r\n          props.state === 'explodedMine'\r\n            ? COLORS.explodedMineBackground\r\n            : isHidden\r\n            ? COLORS.cellBackgroundHidden\r\n            : COLORS.cellBackgroundExposed\r\n        }\r\n        topAndLeftBorderColor={\r\n          isHidden ? COLORS.borders.cell.bright : COLORS.borders.cell.medium\r\n        }\r\n        bottomAndRightBorderColor={\r\n          isHidden ? COLORS.borders.cell.dark : COLORS.borders.cell.medium\r\n        }\r\n        style={getStyles(props)}\r\n      >\r\n        {cellProps.children}\r\n      </CellWrapper>\r\n    )\r\n  }\r\n\r\n  if (props.state === 'hidden' || props.state === '0') {\r\n    return (\r\n      <Cell>\r\n        {props.state !== '0' && props.sweepCell && <HoverTint></HoverTint>}\r\n      </Cell>\r\n    )\r\n  } else if (props.state === 'flagged') {\r\n    return <Cell>⚑</Cell>\r\n  } else if (props.state === 'mine' || props.state === 'explodedMine') {\r\n    return <Cell>💣</Cell>\r\n  } else {\r\n    // for all the numbers\r\n    return <Cell>{props.state}</Cell>\r\n  }\r\n}\r\n\r\nexport default GridCell\r\n\r\ntype CellWrapperProps = {\r\n  background: string\r\n  topAndLeftBorderColor: string\r\n  bottomAndRightBorderColor: string\r\n}\r\nconst CellWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  border-top: 0.05px solid\r\n    ${(props: CellWrapperProps) => props.topAndLeftBorderColor};\r\n  border-left: 0.05px solid\r\n    ${(props: CellWrapperProps) => props.topAndLeftBorderColor};\r\n  border-bottom: 0.05px solid\r\n    ${(props: CellWrapperProps) => props.bottomAndRightBorderColor};\r\n  border-right: 0.05px solid\r\n    ${(props: CellWrapperProps) => props.bottomAndRightBorderColor};\r\n\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  font-family: 'Courier New', Courier, monospace;\r\n  font-weight: 1000;\r\n\r\n  background: ${(props: CellWrapperProps) => props.background};\r\n`\r\n\r\nconst HoverTint = styled.span`\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  &:hover {\r\n    background: ${COLORS.hoverTint};\r\n    cursor: pointer;\r\n  }\r\n`\r\n\r\nconst getStyles = (props: Props) => ({\r\n  color: ((n: string) => {\r\n    switch (n) {\r\n      case '1':\r\n        return COLORS.oneBlue\r\n      case '2':\r\n        return COLORS.twoGreen\r\n      case '3':\r\n        return COLORS.threeOrange\r\n      case '4':\r\n        return COLORS.fourViolet\r\n      case '5':\r\n        return COLORS.fiveRed\r\n      case '6':\r\n        return COLORS.sixTeal\r\n      case '7':\r\n        return COLORS.sevenYellow\r\n      case '8':\r\n        return COLORS.eightMagenta\r\n      case 'flagged':\r\n        return COLORS.flagRed\r\n      default:\r\n        return 'black'\r\n    }\r\n  })(props.state),\r\n  fontSize: `${\r\n    props.state === 'mine' || props.state === 'explodedMine' ? '70%' : '90%'\r\n  }`,\r\n})\r\n","import React from 'react'\r\nimport styled, { css } from 'styled-components/macro'\r\nimport GridCell, { GridCellStates } from './GridCell'\r\nimport { Coordinates } from '../minesweeper'\r\nimport { isEqual } from 'lodash'\r\n\r\ntype Props = {\r\n  disabled: boolean\r\n  remainingFlags: number\r\n  size: {\r\n    width: number\r\n    height: number\r\n    cellPx: number\r\n  }\r\n  state: GridCellStates[][]\r\n  onCellSweep(coords: Coordinates & { timestamp: number }): void\r\n  onCellFlag(coords: Coordinates): void\r\n}\r\n\r\nconst Grid = React.memo(\r\n  (props: Props) => {\r\n    const actualHeightPx = props.size.cellPx * props.size.height + 2 // + 2 for the border\r\n    const actualWidthPx = props.size.cellPx * props.size.width + 2 // + 2 for the border\r\n    const X = Array.from(Array(props.size.width))\r\n    const Y = Array.from(Array(props.size.height))\r\n    return (\r\n      <div\r\n        css={css`\r\n          border: 1px solid gray;\r\n          width: ${actualWidthPx}px;\r\n          height: ${actualHeightPx}px;\r\n          font-size: ${0.75 * props.size.cellPx}px;\r\n          display: flex;\r\n          flex-direction: column;\r\n          align-items: stretch;\r\n        `}\r\n      >\r\n        {Y.map((_, y) => (\r\n          <div\r\n            key={`row-key-${y}`}\r\n            css={css`\r\n              display: flex;\r\n              height: ${props.size.cellPx}px;\r\n            `}\r\n          >\r\n            {X.map((_, x) => {\r\n              const cellState = props.state[y][x]\r\n              const clickHandlers = props.disabled\r\n                ? {}\r\n                : {\r\n                    toggleFlagForCell:\r\n                      props.remainingFlags > 0 || cellState === 'flagged'\r\n                        ? () => props.onCellFlag({ x, y })\r\n                        : undefined,\r\n                    sweepCell:\r\n                      cellState === 'flagged'\r\n                        ? undefined\r\n                        : () =>\r\n                            props.onCellSweep({ x, y, timestamp: Date.now() }),\r\n                  }\r\n              return (\r\n                <GridCell\r\n                  {...clickHandlers}\r\n                  key={`cell-key-${y}-${x}`}\r\n                  state={cellState}\r\n                />\r\n              )\r\n            })}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    )\r\n  },\r\n  (prevProps, nextProps) => isEqual(prevProps, nextProps),\r\n)\r\n\r\nexport default Grid\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { selectors, actions } from '../store'\r\nimport { IState } from '../store/reducer'\r\nimport Grid from '../components/Grid'\r\n\r\nexport default connect(\r\n  (state: IState) => ({\r\n    disabled: selectors.getIsGridDisabled(state),\r\n    remainingFlags: selectors.getRemainingFlags(state),\r\n    size: {\r\n      ...selectors.getBoardDimensions(state),\r\n      cellPx: 24,\r\n    },\r\n    state: selectors.getGridState(state),\r\n  }),\r\n  { onCellSweep: actions.sweep, onCellFlag: actions.flag },\r\n)(Grid)\r\n","import React from 'react'\r\nimport { css } from 'styled-components/macro'\r\nimport { GridCellStates } from './components/GridCell'\r\nimport { Coordinates } from './minesweeper'\r\nimport { COLORS } from './theme'\r\nimport { GameState } from './store/selectors'\r\nimport Header from './containers/Header'\r\nimport Grid from './containers/Grid'\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div\r\n      css={css`\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        height: 100vh;\r\n        background: ${COLORS.appBackground};\r\n      `}\r\n    >\r\n      <div\r\n        css={css`\r\n          max-width: 80%;\r\n          display: flex;\r\n          flex-direction: column;\r\n          align-items: center;\r\n          padding: 10px;\r\n          background: ${COLORS.cellBackgroundHidden};\r\n        `}\r\n      >\r\n        <Header />\r\n        <Grid />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\n\r\nimport { Provider } from 'react-redux'\r\n\r\nimport store, { actions } from './store'\r\n\r\nstore.dispatch(\r\n  actions.initialize({\r\n    width: 10,\r\n    height: 10,\r\n    numberOfMines: 10,\r\n  }),\r\n)\r\nsetInterval(() => store.dispatch(actions.incrementTimer()), 1000)\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n)\r\n"],"sourceRoot":""}